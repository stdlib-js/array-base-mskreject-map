{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/assign.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolveGetter = require( '@stdlib/array-base-resolve-getter' );\n\n\n// MAIN //\n\n/**\n* Returns a new array by applying a mask to a provided input array and mapping the unmasked values according to a callback function.\n*\n* @param {Collection} x - input array\n* @param {Collection} mask - mask array\n* @param {Function} clbk - function to apply\n* @param {*} [thisArg] - function context\n* @returns {Array} output array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n* var mask = [ 0, 1, 0, 1 ];\n*\n* var y = mskrejectMap( x, mask, function( val ) {\n*     return val * 2;\n* } );\n* // returns [ 2, 6 ]\n*/\nfunction mskrejectMap( x, mask, clbk, thisArg ) {\n\tvar xget;\n\tvar mget;\n\tvar out;\n\tvar i;\n\n\t// Resolve accessors for retrieving array elements:\n\txget = resolveGetter( x );\n\tmget = resolveGetter( mask );\n\n\t// Extract each desired element from the provided array...\n\tout = [];\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( !mget( mask, i ) ) {\n\t\t\tout.push( clbk.call( thisArg, xget( x, i ), i, x ) ); // use `Array#push` to ensure \"fast\" elements\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = mskrejectMap;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isComplexDataType = require( '@stdlib/array-base-assert-is-complex-floating-point-data-type' );\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar reinterpret = require( '@stdlib/strided-base-reinterpret-complex' );\n\n\n// FUNCTIONS //\n\n/**\n* Applies a mask to an indexed array, maps the unmasked values according to a callback function, and assigns to elements in an indexed output array.\n*\n* @private\n* @param {Collection} x - input array\n* @param {IntegerArray} mask - mask array\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} clbk - function to apply\n* @param {*} [thisArg] - function context\n* @returns {Collection} output array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n* var mask = [ 0, 1, 0, 1 ];\n*\n* var out = [ 0, 0, 0, 0 ];\n*\n* var arr = indexed( x, mask, out, 1, 0, function( val ) {\n*     return val * 2;\n* } );\n* // returns [ 2, 6, 0, 0 ]\n*/\nfunction indexed( x, mask, out, stride, offset, clbk, thisArg ) {\n\tvar io;\n\tvar i;\n\n\tio = offset;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( !mask[ i ] ) {\n\t\t\tout[ io ] = clbk.call(thisArg, x[ i ], i, x );\n\t\t\tio += stride;\n\t\t}\n\t}\n\treturn out;\n}\n\n/**\n* Applies a mask to an accessor array, maps the unmasked values according to a callback function, and assigns to elements in an accessor output array.\n*\n* @private\n* @param {Object} x - input array object\n* @param {Object} mask - mask array object\n* @param {Object} out - output array object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} clbk - function to apply\n* @param {*} [thisArg] - function context\n* @returns {Collection} output array\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = toAccessorArray( [ 1, 2, 3, 4 ] );\n* var mask = toAccessorArray( [ 0, 1, 0, 1 ] );\n*\n* var out = toAccessorArray( [ 0, 0, 0, 0 ] );\n* var arr = accessors( arraylike2object( x ), arraylike2object( mask ), arraylike2object( out ), 1, 0, function( val ) {\n*     return val * 2;\n* } );\n*\n* var v = arr.get( 0 );\n* // returns 2\n*\n* v = arr.get( 1 );\n* // returns 6\n*/\nfunction accessors( x, mask, out, stride, offset, clbk, thisArg ) {\n\tvar xdata;\n\tvar mdata;\n\tvar odata;\n\tvar xget;\n\tvar mget;\n\tvar oset;\n\tvar io;\n\tvar i;\n\n\txdata = x.data;\n\tmdata = mask.data;\n\todata = out.data;\n\n\txget = x.accessors[ 0 ];\n\tmget = mask.accessors[ 0 ];\n\toset = out.accessors[ 1 ];\n\n\tio = offset;\n\tfor ( i = 0; i < xdata.length; i++ ) {\n\t\tif ( !mget( mdata, i ) ) {\n\t\t\toset( odata, io, clbk.call( thisArg, xget( xdata, i ), i, xdata ) );\n\t\t\tio += stride;\n\t\t}\n\t}\n\treturn odata;\n}\n\n/**\n* Applies a mask to a complex array, maps the unmasked values according to a callback function, and assigns to elements in a complex output array.\n*\n* @private\n* @param {Collection} x - real-valued floating-point input array view\n* @param {Object} mask - mask array object\n* @param {Collection} out - real-valued floating-point output array view\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} clbk - function to apply\n* @param {*} [thisArg] - function context\n* @returns {Collection} output array view\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var mask = [ 0, 1, 0, 1 ];\n*\n* var out = new Float64Array( 8 );\n*\n* var arr = complex( x, arraylike2object( mask ), out, 1, 0, function( val ) {\n*     return val * 2;\n* } );\n* // returns <Float64Array>[ 2.0, 4.0, 10.0, 12.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction complex( x, mask, out, stride, offset, clbk, thisArg ) {\n\tvar mdata;\n\tvar mget;\n\tvar io;\n\tvar so;\n\tvar i;\n\tvar j;\n\n\tmdata = mask.data;\n\tmget = mask.accessors[ 0 ];\n\n\tso = stride * 2; // note: multiply by 2, as real-valued array consists of interleaved real and imaginary components\n\tio = offset * 2;\n\tfor ( i = 0; i < mdata.length; i++ ) {\n\t\tif ( !mget( mdata, i ) ) {\n\t\t\tj = i * 2;\n\t\t\tout[ io ] = clbk.call( thisArg, x[ j ], j, x );\n\t\t\tout[ io+1 ] = clbk.call( thisArg, x[ j+1 ], j+1, x );\n\t\t\tio += so;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Applies a mask to a provided input array, maps the unmasked values according to a callback function, and assigns to elements in a provided output array.\n*\n* @param {Collection} x - input array\n* @param {Collection} mask - mask array\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} clbk - function to apply\n* @param {*} [thisArg] - function context\n* @returns {Collection} output array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n* var mask = [ 0, 1, 0, 1 ];\n*\n* var out = [ 0, 0 ];\n* var arr = assign( x, mask, out, 1, 0, function( val ) {\n*     return val * 2;\n* } );\n* // returns [ 2, 6 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\nfunction assign( x, mask, out, stride, offset, clbk, thisArg ) {\n\tvar xo;\n\tvar mo;\n\tvar oo;\n\n\txo = arraylike2object( x );\n\tmo = arraylike2object( mask );\n\too = arraylike2object( out );\n\tif (\n\t\txo.accessorProtocol ||\n\t\tmo.accessorProtocol ||\n\t\too.accessorProtocol\n\t) {\n\t\t// Note: we only explicitly support complex-to-complex, as this function should not be concerned with casting rules, etc. That is left to userland...\n\t\tif (\n\t\t\tisComplexDataType( xo.dtype ) &&\n\t\t\tisComplexDataType( oo.dtype )\n\t\t) {\n\t\t\tcomplex( reinterpret( x, 0 ), mo, reinterpret( out, 0 ), stride, offset, clbk, thisArg ); // eslint-disable-line max-len\n\t\t\treturn out;\n\t\t}\n\t\taccessors( xo, mo, oo, stride, offset, clbk, thisArg );\n\t\treturn out;\n\t}\n\tindexed( x, mask, out, stride, offset, clbk, thisArg );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = assign;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a mask to a provided input array and map the unmasked values according to a callback function.\n*\n* @module @stdlib/array-base-mskreject-map\n*\n* @example\n* var mskrejectMap = require( '@stdlib/array-base-mskreject-map' );\n*\n* var x = [ 1, 2, 3, 4 ];\n* var mask = [ 0, 1, 0, 1 ];\n*\n* var y = mskrejectMap( x, mask, function( val ) {\n*     return val * 2;\n* } );\n* // returns [ 2, 6 ]\n*\n* @example\n* var mskrejectMap = require( '@stdlib/array-base-mskreject-map' );\n*\n* var x = [ 1, 2, 3, 4 ];\n* var mask = [ 0, 1, 0, 1 ];\n*\n* var out = [ 0, 0 ];\n* var arr = mskrejectMap.assign( x, mask, out, 1, 0, function( val ) {\n*     return val + this;\n* }, 5 );\n* // returns [ 6, 8 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,mCAAoC,EAuBjE,SAASC,EAAcC,EAAGC,EAAMC,EAAMC,EAAU,CAC/C,IAAIC,EACAC,EACAC,EACAC,EAQJ,IALAH,EAAON,EAAeE,CAAE,EACxBK,EAAOP,EAAeG,CAAK,EAG3BK,EAAM,CAAC,EACDC,EAAI,EAAGA,EAAIP,EAAE,OAAQO,IACpBF,EAAMJ,EAAMM,CAAE,GACnBD,EAAI,KAAMJ,EAAK,KAAMC,EAASC,EAAMJ,EAAGO,CAAE,EAAGA,EAAGP,CAAE,CAAE,EAGrD,OAAOM,CACR,CAKAT,EAAO,QAAUE,ICpEjB,IAAAS,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAoB,QAAS,+DAAgE,EAC7FC,EAAmB,QAAS,qCAAsC,EAClEC,EAAc,QAAS,0CAA2C,EA6BtE,SAASC,EAASC,EAAGC,EAAMC,EAAKC,EAAQC,EAAQC,EAAMC,EAAU,CAC/D,IAAIC,EACAC,EAGJ,IADAD,EAAKH,EACCI,EAAI,EAAGA,EAAIR,EAAE,OAAQQ,IACpBP,EAAMO,CAAE,IACbN,EAAKK,CAAG,EAAIF,EAAK,KAAKC,EAASN,EAAGQ,CAAE,EAAGA,EAAGR,CAAE,EAC5CO,GAAMJ,GAGR,OAAOD,CACR,CAiCA,SAASO,EAAWT,EAAGC,EAAMC,EAAKC,EAAQC,EAAQC,EAAMC,EAAU,CACjE,IAAII,EACAC,EACAC,EACAC,EACAC,EACAC,EACAR,EACAC,EAWJ,IATAE,EAAQV,EAAE,KACVW,EAAQV,EAAK,KACbW,EAAQV,EAAI,KAEZW,EAAOb,EAAE,UAAW,CAAE,EACtBc,EAAOb,EAAK,UAAW,CAAE,EACzBc,EAAOb,EAAI,UAAW,CAAE,EAExBK,EAAKH,EACCI,EAAI,EAAGA,EAAIE,EAAM,OAAQF,IACxBM,EAAMH,EAAOH,CAAE,IACpBO,EAAMH,EAAOL,EAAIF,EAAK,KAAMC,EAASO,EAAMH,EAAOF,CAAE,EAAGA,EAAGE,CAAM,CAAE,EAClEH,GAAMJ,GAGR,OAAOS,CACR,CA6BA,SAASI,EAAShB,EAAGC,EAAMC,EAAKC,EAAQC,EAAQC,EAAMC,EAAU,CAC/D,IAAIK,EACAG,EACAP,EACAU,EACAT,EACAU,EAOJ,IALAP,EAAQV,EAAK,KACba,EAAOb,EAAK,UAAW,CAAE,EAEzBgB,EAAKd,EAAS,EACdI,EAAKH,EAAS,EACRI,EAAI,EAAGA,EAAIG,EAAM,OAAQH,IACxBM,EAAMH,EAAOH,CAAE,IACpBU,EAAIV,EAAI,EACRN,EAAKK,CAAG,EAAIF,EAAK,KAAMC,EAASN,EAAGkB,CAAE,EAAGA,EAAGlB,CAAE,EAC7CE,EAAKK,EAAG,CAAE,EAAIF,EAAK,KAAMC,EAASN,EAAGkB,EAAE,CAAE,EAAGA,EAAE,EAAGlB,CAAE,EACnDO,GAAMU,GAGR,OAAOf,CACR,CA8BA,SAASiB,EAAQnB,EAAGC,EAAMC,EAAKC,EAAQC,EAAQC,EAAMC,EAAU,CAC9D,IAAIc,EACAC,EACAC,EAKJ,OAHAF,EAAKvB,EAAkBG,CAAE,EACzBqB,EAAKxB,EAAkBI,CAAK,EAC5BqB,EAAKzB,EAAkBK,CAAI,EAE1BkB,EAAG,kBACHC,EAAG,kBACHC,EAAG,iBAIF1B,EAAmBwB,EAAG,KAAM,GAC5BxB,EAAmB0B,EAAG,KAAM,GAE5BN,EAASlB,EAAaE,EAAG,CAAE,EAAGqB,EAAIvB,EAAaI,EAAK,CAAE,EAAGC,EAAQC,EAAQC,EAAMC,CAAQ,EAChFJ,IAERO,EAAWW,EAAIC,EAAIC,EAAInB,EAAQC,EAAQC,EAAMC,CAAQ,EAC9CJ,IAERH,EAASC,EAAGC,EAAMC,EAAKC,EAAQC,EAAQC,EAAMC,CAAQ,EAC9CJ,EACR,CAKAP,EAAO,QAAUwB,ICtLjB,IAAII,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAS,IAKbF,EAAaC,EAAM,SAAUC,CAAO,EAKpC,OAAO,QAAUD",
  "names": ["require_main", "__commonJSMin", "exports", "module", "resolveGetter", "mskrejectMap", "x", "mask", "clbk", "thisArg", "xget", "mget", "out", "i", "require_assign", "__commonJSMin", "exports", "module", "isComplexDataType", "arraylike2object", "reinterpret", "indexed", "x", "mask", "out", "stride", "offset", "clbk", "thisArg", "io", "i", "accessors", "xdata", "mdata", "odata", "xget", "mget", "oset", "complex", "so", "j", "assign", "xo", "mo", "oo", "setReadOnly", "main", "assign"]
}
